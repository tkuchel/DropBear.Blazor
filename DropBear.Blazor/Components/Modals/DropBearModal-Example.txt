@page "/"
@inject IModalService ModalService
@using DropBear.Blazor.Enums
@using DropBear.Blazor.Models
@using DropBear.Blazor.Components.Modals

<h1>Modal Demo Page</h1>

<h2>Pre-configured Modals (Service Approach)</h2>
<button class="btn btn-primary" @onclick="OpenServiceModal1">Open Service Modal 1</button>
<button class="btn btn-secondary" @onclick="OpenServiceModal2">Open Service Modal 2</button>

<h2>Manual Modals</h2>
<button class="btn btn-success" @onclick="OpenManualModal1">Open Manual Modal 1</button>
<button class="btn btn-warning" @onclick="OpenManualModal2">Open Manual Modal 2</button>

<DropBearModalContainer />

<DropBearModal Id="manual-modal-1" Title="Manual Modal 1" Theme="ThemeType.DarkMode" Buttons="@manualModal1Buttons">
    <BodyContent>
        <p>This is the content of Manual Modal 1.</p>
        <input type="text" class="form-control" placeholder="Enter some text" />
    </BodyContent>
</DropBearModal>

<DropBearModal Id="manual-modal-2" Title="Manual Modal 2" Theme="ThemeType.LightMode" Buttons="@manualModal2Buttons">
    <BodyContent>
        <p>This is the content of Manual Modal 2.</p>
        <select class="form-control">
            <option>Option 1</option>
            <option>Option 2</option>
            <option>Option 3</option>
        </select>
    </BodyContent>
</DropBearModal>

@code {
    private IReadOnlyCollection<ModalButton> manualModal1Buttons;
    private IReadOnlyCollection<ModalButton> manualModal2Buttons;

    protected override void OnInitialized()
    {
        // Configure service modals
        ConfigureServiceModal1();
        ConfigureServiceModal2();

        // Configure manual modal buttons
        ConfigureManualModalButtons();
    }

    private void ConfigureServiceModal1()
    {
        var modal = new Modal
        {
            Id = "service-modal-1",
            Title = "Service Modal 1",
            Theme = ThemeType.DarkMode,
            BodyContent = builder =>
            {
                builder.AddContent(0, "This is the content of Service Modal 1.");
                builder.OpenElement(1, "input");
                builder.AddAttribute(2, "type", "text");
                builder.AddAttribute(3, "class", "form-control");
                builder.AddAttribute(4, "placeholder", "Enter some text");
                builder.CloseElement();
            },
            Buttons = new List<ModalButton>
            {
                new ModalButton { Text = "Close", Type = ButtonType.Secondary, OnClick = EventCallback.Factory.Create(this, () => ModalService.Close("service-modal-1")) },
                new ModalButton { Text = "Submit", Type = ButtonType.Primary, OnClick = EventCallback.Factory.Create(this, SubmitServiceModal1) }
            }
        };

        ModalService.AddModal(modal);
    }

    private void ConfigureServiceModal2()
    {
        var modal = new Modal
        {
            Id = "service-modal-2",
            Title = "Service Modal 2",
            Theme = ThemeType.LightMode,
            BodyContent = builder =>
            {
                builder.AddContent(0, "This is the content of Service Modal 2.");
                builder.OpenElement(1, "select");
                builder.AddAttribute(2, "class", "form-control");
                builder.OpenElement(3, "option");
                builder.AddContent(4, "Option A");
                builder.CloseElement();
                builder.OpenElement(5, "option");
                builder.AddContent(6, "Option B");
                builder.CloseElement();
                builder.OpenElement(7, "option");
                builder.AddContent(8, "Option C");
                builder.CloseElement();
                builder.CloseElement();
            },
            Buttons = new List<ModalButton>
            {
                new ModalButton { Text = "Cancel", Type = ButtonType.Secondary, OnClick = EventCallback.Factory.Create(this, () => ModalService.Close("service-modal-2")) },
                new ModalButton { Text = "Confirm", Type = ButtonType.Primary, OnClick = EventCallback.Factory.Create(this, ConfirmServiceModal2) }
            }
        };

        ModalService.AddModal(modal);
    }

    private void ConfigureManualModalButtons()
    {
        manualModal1Buttons = new List<ModalButton>
        {
            new ModalButton { Text = "Close", Type = ButtonType.Secondary, OnClick = EventCallback.Factory.Create(this, () => ModalService.Close("manual-modal-1")) },
            new ModalButton { Text = "Save", Type = ButtonType.Primary, OnClick = EventCallback.Factory.Create(this, SaveManualModal1) }
        };

        manualModal2Buttons = new List<ModalButton>
        {
            new ModalButton { Text = "Cancel", Type = ButtonType.Secondary, OnClick = EventCallback.Factory.Create(this, () => ModalService.Close("manual-modal-2")) },
            new ModalButton { Text = "Apply", Type = ButtonType.Primary, OnClick = EventCallback.Factory.Create(this, ApplyManualModal2) }
        };
    }

    private void OpenServiceModal1() => ModalService.Show("service-modal-1");
    private void OpenServiceModal2() => ModalService.Show("service-modal-2");
    private void OpenManualModal1() => ModalService.Show("manual-modal-1");
    private void OpenManualModal2() => ModalService.Show("manual-modal-2");

    private void SubmitServiceModal1()
    {
        // Handle submission logic for Service Modal 1
        Console.WriteLine("Service Modal 1 submitted");
        ModalService.Close("service-modal-1");
    }

    private void ConfirmServiceModal2()
    {
        // Handle confirmation logic for Service Modal 2
        Console.WriteLine("Service Modal 2 confirmed");
        ModalService.Close("service-modal-2");
    }

    private void SaveManualModal1()
    {
        // Handle save logic for Manual Modal 1
        Console.WriteLine("Manual Modal 1 saved");
        ModalService.Close("manual-modal-1");
    }

    private void ApplyManualModal2()
    {
        // Handle apply logic for Manual Modal 2
        Console.WriteLine("Manual Modal 2 applied");
        ModalService.Close("manual-modal-2");
    }
}
